{"version":3,"file":"cognitable.mjs","sources":["../../../src/lib/cognitable.service.ts","../../../src/lib/commons/table/table-base.ts","../../../src/lib/commons/exportables/table-instance.ts","../../../src/lib/components/table/cognitable-pagination/cognitable-pagination.component.ts","../../../src/lib/components/table/cognitable-pagination/cognitable-pagination.component.html","../../../src/lib/components/table/cognitable-header-cell/cognitable-header-cell.component.ts","../../../src/lib/components/table/cognitable-header-cell/cognitable-header-cell.component.html","../../../src/lib/components/table/cogintable-data-cell/cognitable-data-cell.component.ts","../../../src/lib/components/table/cogintable-data-cell/cognitable-data-cell.component.html","../../../src/lib/cognitable.component.ts","../../../src/lib/cognitable.component.html","../../../src/public-api.ts","../../../src/cognitable.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CognitableService {\n\n}\n","import {TableHeader} from '../models/table-header';\nimport {EventEmitter} from '@angular/core';\n\nexport class TableBase {\n    // Init\n    public afterTableInit = new EventEmitter();\n\n    // Header\n    public tableHeaders: TableHeader[] | undefined;\n\n    // Data\n    public tableData: any;\n\n    // Backup\n    public backupData: any; // For backup the table data, so that additional processes won't be affecting it\n\n    // Pagination\n    paginationEnabled: boolean = false;\n    allowedPageSizes: number[] = [10, 25, 50, 100];\n    pageSize: number = 10;\n    totalPages = 0;\n    currentPage = 1;\n    paginationButtons: any[] = [];\n\n    // Table Action Events\n    public cellContentClicked = new EventEmitter();\n    public cellContentHover = new EventEmitter();\n\n    // Table Size\n    height: number = 400;\n\n    // Overlays\n    loading: boolean = false;\n    noData: boolean = false;\n    loadingMessage!: string;\n    noDataMessage!: string;\n\n    constructor() { }\n\n    setBackupData(data: any) {\n        this.backupData = JSON.parse(JSON.stringify(data ?? []))\n    }\n\n    sort(field: string, order: string | undefined) {\n        if (!order) {\n            this.tableData = JSON.parse(JSON.stringify(this.backupData ?? []));\n        } else {\n            this.tableData = this.tableData.sort((a: any, b: any) => {\n                if (a[field] < b[field]) {\n                    return order === 'asc' ? -1 : 1;\n                }\n                if (a[field] > b[field]) {\n                    return order === 'asc' ? 1 : -1;\n                }\n                return 0;\n            });\n        }\n    }\n\n    filter(filterValue: any, headers?: TableHeader[]) {\n        // this.backupData = (filterValue && !this.backupData?.length) ? this.setBackupData(this.tableData) : this.backupData; // Taking the backup of original data\n        if (headers?.length) {\n            this.filterBySpecifiedFields(headers, filterValue);\n        } else {\n            this.filterByAllFields(filterValue);\n        }\n    }\n\n    filterByAllFields(filterValue: any) {\n        const nonSearchableHeaders = this.tableHeaders?.filter(header => header?.search?.columnSearchIgnored); // Filtering the search not allowed column headers\n        const nonSearchFields = nonSearchableHeaders?.map(header => header.field);\n        let temporaryData = JSON.parse(JSON.stringify(this.backupData ?? []));\n        temporaryData = temporaryData.filter(\n            (record: any) => {\n                for (const recordField in (record ?? {})) {\n                    if (!nonSearchFields?.includes(recordField)) {\n                        const value = record[recordField];\n                        if (typeof value === 'string' && value?.length && value.toLowerCase().includes(filterValue.toLowerCase())) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n        );\n        this.tableData = temporaryData;\n    }\n\n    filterBySpecifiedFields(filterValue: any, headers?: TableHeader[]) {\n\n    }\n\n    loadPagination() {\n        if (this.paginationEnabled && this.backupData?.length) {\n            this.totalPages = Math.ceil(this.pageSize && this.backupData.length ? this.backupData.length / this.pageSize : 0);\n            this.changePagination(1);\n        }\n    }\n\n    changePagination(page: any) {\n        this.currentPage = page;\n        this.tableData = this.getCurrentPageData();\n    }\n\n    getCurrentPageData() {\n        if (this.currentPage && this.pageSize && this.backupData?.length) {\n            const pageStartIndex = (this.currentPage * this.pageSize) - this.pageSize;\n            return this.backupData.slice(pageStartIndex, pageStartIndex + this.pageSize);\n        }\n        return [];\n    }\n\n    setLoading(loading: boolean) {\n        this.loading = loading;\n    }\n\n    setNoData(noData: boolean) {\n        this.noData = noData;\n    }\n}\n","import {TableBase} from '../table/table-base';\n\nexport class TableInstance extends TableBase {\n  constructor() {\n    super();\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {NgClass, NgIf} from '@angular/common';\nimport {TableInstance} from '../../../commons/exportables/table-instance';\n\n@Component({\n  selector: 'lib-cognitable-pagination',\n  standalone: true,\n  imports: [\n    NgIf,\n    NgClass\n  ],\n  templateUrl: './cognitable-pagination.component.html',\n  styleUrl: './cognitable-pagination.component.css'\n})\nexport class CognitablePaginationComponent {\n  @Input()\n  tableInstance: TableInstance = new TableInstance();\n\n  constructor() {\n  }\n\n  goToPage(page: any) {\n    this.tableInstance?.changePagination(page);\n  }\n\n  nextPage() {\n    if (this.tableInstance?.currentPage !== this.tableInstance?.totalPages) {\n      this.goToPage((this.tableInstance?.currentPage ?? 0) + 1);\n    }\n  }\n\n  previousPage() {\n    if (this.tableInstance && this.tableInstance.currentPage > 1) {\n      this.goToPage(this.tableInstance?.currentPage - 1);\n    }\n  }\n}\n","<div class=\"cognitable-pagination-container\">\n    <div class=\"cognitable-pagination-button-group\">\n        <div (click)=\"previousPage()\" class=\"cognitable-pagination-previous-button\">\n            <div class=\"cognitable-pagination-previous-button-content\">\n                <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M9.04529 11.6383C8.92341 11.6383 8.80154 11.5977 8.72029 11.4961L4.12966 6.82422C3.94685 6.64141 3.94685 6.35703 4.12966 6.17422L8.72029 1.50234C8.9031 1.31953 9.18748 1.31953 9.37029 1.50234C9.5531 1.68516 9.5531 1.96953 9.37029 2.15234L5.10466 6.49922L9.3906 10.8461C9.57341 11.0289 9.57341 11.3133 9.3906 11.4961C9.26873 11.5773 9.16716 11.6383 9.04529 11.6383Z\" fill=\"#637381\"/>\n                </svg>\n            </div>\n        </div>\n        <div class=\"cognitable-pagination-label-button\" *ngIf=\"tableInstance!.currentPage <= 3 || tableInstance!.currentPage >= tableInstance!.totalPages - 2\">\n            <div class=\"cognitable-pagination-label-button-content\">\n                &nbsp;\n            </div>\n        </div>\n        <div (click)=\"goToPage(1)\" class=\"cognitable-pagination-number-button\" [ngClass]=\"{'active': tableInstance!.currentPage === 1}\" *ngIf=\"tableInstance!.totalPages > 0\">\n            <div class=\"cognitable-pagination-number-button-content\">\n                1\n            </div>\n        </div>\n        <div (click)=\"goToPage(2)\" class=\"cognitable-pagination-number-button\" [ngClass]=\"{'active': tableInstance!.currentPage === 2}\" *ngIf=\"tableInstance!.totalPages > 1 && tableInstance!.currentPage < (tableInstance!.pageSize / 2)\">\n            <div class=\"cognitable-pagination-number-button-content\">\n                2\n            </div>\n        </div>\n        <div class=\"cognitable-pagination-label-button\" *ngIf=\"tableInstance!.totalPages > 4 && tableInstance!.currentPage !== 3\">\n            <div class=\"cognitable-pagination-label-button-content\">\n                ..\n            </div>\n        </div>\n        <div class=\"cognitable-pagination-number-button active\" *ngIf=\"tableInstance!.totalPages > 4 && tableInstance!.currentPage > 2 && !([1, 2, tableInstance!.totalPages, tableInstance!.totalPages - 1].includes(tableInstance!.currentPage))\">\n            <div class=\"cognitable-pagination-number-button-content\">\n                {{tableInstance!.currentPage}}\n            </div>\n        </div>\n        <div class=\"cognitable-pagination-label-button\" *ngIf=\"tableInstance!.totalPages > 4 && tableInstance!.currentPage > 2 && tableInstance!.currentPage < tableInstance!.totalPages - 2\">\n            <div class=\"cognitable-pagination-label-button-content\">\n                ..\n            </div>\n        </div>\n        <div (click)=\"goToPage(tableInstance!.totalPages - 1)\" class=\"cognitable-pagination-number-button\" [ngClass]=\"{'active': tableInstance!.currentPage === tableInstance!.totalPages - 1}\" *ngIf=\"tableInstance!.totalPages > 1 && (tableInstance!.currentPage >= (tableInstance!.pageSize / 2) || tableInstance!.totalPages - 1 < 4) && !([1, 2].includes(tableInstance!.totalPages - 1))\">\n            <div class=\"cognitable-pagination-number-button-content\">\n                {{tableInstance!.totalPages - 1}}\n            </div>\n        </div>\n        <div (click)=\"goToPage(tableInstance!.totalPages)\" class=\"cognitable-pagination-number-button\"  [ngClass]=\"{'active': tableInstance!.currentPage === tableInstance!.totalPages}\" *ngIf=\"tableInstance!.totalPages && !([1, 2].includes(tableInstance!.totalPages))\">\n            <div class=\"cognitable-pagination-number-button-content\">\n                {{tableInstance!.totalPages}}\n            </div>\n        </div>\n        <div class=\"cognitable-pagination-label-button\" *ngIf=\"tableInstance!.currentPage < 3 || !(tableInstance!.currentPage <= tableInstance!.totalPages - 2)\">\n            <div class=\"cognitable-pagination-label-button-content\">\n                &nbsp;\n            </div>\n        </div>\n        <div (click)=\"nextPage()\" class=\"cognitable-pagination-next-button\">\n            <div class=\"cognitable-pagination-next-button-content\">\n                <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M4.45466 11.6383C4.33279 11.6383 4.23123 11.5977 4.12966 11.5164C3.94685 11.3336 3.94685 11.0492 4.12966 10.8664L8.39529 6.49922L4.12966 2.15234C3.94685 1.96953 3.94685 1.68516 4.12966 1.50234C4.31248 1.31953 4.59685 1.31953 4.77966 1.50234L9.37029 6.17422C9.5531 6.35703 9.5531 6.64141 9.37029 6.82422L4.77966 11.4961C4.69841 11.5773 4.57654 11.6383 4.45466 11.6383Z\" fill=\"#637381\"/>\n                </svg>\n            </div>\n        </div>\n    </div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {TableHeader} from '../../../commons/models/table-header';\nimport {NgIf, NgStyle} from '@angular/common';\nimport {TableInstance} from '../../../commons/exportables/table-instance';\n\n@Component({\n  selector: 'cognitable-header-cell',\n  standalone: true,\n  imports: [\n    NgIf,\n    NgStyle\n  ],\n  templateUrl: './cognitable-header-cell.component.html',\n  styleUrl: './cognitable-header-cell.component.css'\n})\nexport class CognitableHeaderCellComponent implements OnInit {\n  @Input()\n  header: TableHeader | undefined;\n\n  @Input()\n  tableInstance: TableInstance | undefined;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  clickAction() {\n    if (this.header?.sort?.enabled) {\n      this.sort();\n    }\n  }\n\n  sort() {\n    if (this.header?.sort?.enabled) {\n      if (!this.header.sort.direction) {\n        this.header.sort.direction = 'asc';\n      } else if (this.header.sort.direction === 'asc') {\n        this.header.sort.direction = 'desc';\n      } else if (this.header.sort.direction === 'desc') {\n        this.header.sort.direction = undefined;\n      }\n      this.tableInstance?.sort(this.header.field, this.header.sort.direction);\n    }\n  }\n}\n","<div [style]=\"'height: 100%; display: flex; align-items: center; ' + header?.styles?.headerCellStyles\">\n  <div style=\"width: 20px; height: 100%; display: flex; align-items: center;\">\n    <div style=\"width: 15px; height: 15px;\">&nbsp;</div>\n  </div>\n  <div class=\"cognitable-header-cell\" (click)=\"clickAction()\">\n    <div class=\"cognitable-header-cell-content\" [style]=\"header?.styles?.headerCellContentStyles\">{{header?.title}}</div>\n  </div>\n  <div style=\"width: 20px; height: 100%; display: flex; align-items: center; justify-content: center;\">\n\n    <!-- Sorting -->\n    <div style=\"width: 15px; height: 15px;\" *ngIf=\"header?.sort?.enabled\">\n      <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;\" *ngIf=\"header?.sort?.direction === 'asc'\">\n        <svg width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M4.0625 9.375L7.8125 5.625L11.5625 9.375\" stroke=\"black\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </div>\n\n      <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;\" *ngIf=\"header?.sort?.direction === 'desc'\">\n        <svg width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M10.9375 5.625L7.1875 9.375L3.4375 5.625\" stroke=\"black\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </div>\n    </div>\n    <!-- /Sorting -->\n\n  </div>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  ComponentFactoryResolver,\n  Injector,\n  Input,\n  OnInit,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport {TableHeader} from '../../../commons/models/table-header';\nimport {TableInstance} from '../../../commons/exportables/table-instance';\nimport {NgIf} from '@angular/common';\n\n@Component({\n  selector: 'cogintable-data-cell',\n  standalone: true,\n  imports: [\n    NgIf\n  ],\n  templateUrl: './cognitable-data-cell.component.html',\n  styleUrl: './cognitable-data-cell.component.css'\n})\nexport class CognitableDataCellComponent implements OnInit, AfterViewInit {\n  @ViewChild('componentRenderer', {read: ViewContainerRef}) container!: ViewContainerRef;\n\n  @Input()\n  header: TableHeader | undefined;\n\n  @Input()\n  cellData: any;\n\n  @Input()\n  rowData: any;\n\n  @Input()\n  tableInstance: TableInstance | undefined;\n\n  constructor(private injector: Injector, private viewContainerRef: ViewContainerRef) {\n  }\n\n  ngOnInit() {\n    if (this.header?.renderer?.componentName?.length) {\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.container && this.header?.renderer?.component) {\n      this.container.clear();\n      const componentRef = this.container.createComponent(this.header?.renderer?.component)\n      if (componentRef?.instance) {\n        // @ts-ignore\n        componentRef.instance['additionalData'] = this.header?.renderer?.additionalData;\n        // @ts-ignore\n        componentRef.instance['header'] = this.header;\n        // @ts-ignore\n        componentRef.instance['rowData'] = this.rowData;\n        // @ts-ignore\n        componentRef.instance['cellData'] = this.cellData;\n      }\n    }\n  }\n\n  click() {\n    this.tableInstance?.cellContentClicked.emit({\n      header: this.header,\n      data: this.cellData,\n      rowData: this.rowData\n    });\n  }\n}\n","<div style=\"display: flex;\">\n  <div style=\"width: 20px; height: 100%; display: flex; align-items: center;\">\n    <div style=\"width: 15px; height: 15px;\">&nbsp;</div> <!-- Space for Checkbox, Numbers, Etc -->\n  </div>\n\n  <div class=\"cognitable-data-cell\" [style]=\"header?.styles?.cellStyles\">\n    <div class=\"cognitable-data-cell-content\" [style]=\"header?.styles?.cellContentStyles\" (click)=\"click()\">\n        <ng-container *ngIf=\"!header?.renderer?.component\">{{cellData}}</ng-container>\n        <ng-container *ngIf=\"header?.renderer?.component\" #componentRenderer></ng-container>\n    </div>\n  </div>\n\n  <div style=\"width: 20px; height: 100%; display: flex; align-items: center;\">\n    <div style=\"width: 15px; height: 15px;\">&nbsp;</div> <!-- Space to sync with sort in the header, can be used for anything useful -->\n  </div>\n</div>\n","import {AfterViewInit, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {TableHeader} from './commons/models/table-header';\nimport {NgForOf, NgIf, NgStyle} from '@angular/common';\nimport {TableInstance} from './commons/exportables/table-instance';\nimport {CognitablePaginationComponent} from './components/table/cognitable-pagination/cognitable-pagination.component';\nimport {\n  CognitableHeaderCellComponent\n} from './components/table/cognitable-header-cell/cognitable-header-cell.component';\nimport {\n  CognitableDataCellComponent\n} from './components/table/cogintable-data-cell/cognitable-data-cell.component';\n\n@Component({\n  selector: 'cognitable',\n  standalone: true,\n  imports: [\n    NgForOf,\n    NgStyle,\n    NgIf,\n    CognitablePaginationComponent,\n    CognitableHeaderCellComponent,\n    CognitableDataCellComponent\n  ],\n  templateUrl: './cognitable.component.html',\n  styleUrl: './cognitable.component.scss'\n})\nexport class CognitableComponent extends TableInstance implements AfterViewInit {\n  @Input()\n  override tableHeaders: Array<TableHeader> = [];\n\n  @Input()\n  declare tableData: any;\n\n  @Input()\n  override paginationEnabled: boolean = false;\n\n  @Input()\n  override allowedPageSizes: number[] = [10, 25, 50, 100];\n\n  @Input()\n  override pageSize: number = 10;\n\n  @Input()\n  override height = 400;\n\n  @Input()\n  override loadingMessage: string = 'Loading...';\n\n  @Input()\n  override noDataMessage: string = 'No Data';\n\n  @Output()\n  override afterTableInit = new EventEmitter<TableInstance>();\n\n  @Output()\n  override cellContentClicked = new EventEmitter();\n\n  @Output()\n  override cellContentHover = new EventEmitter();\n\n  public tableInstance: TableInstance = this;\n\n  override loading: boolean = false;\n  override noData: boolean = false;\n\n  constructor() {\n    super();\n    setTimeout(() => {\n      this.init();\n    }, 100);\n  }\n\n  ngAfterViewInit() {\n    this.afterTableInit.emit(this);\n  }\n\n  init() {\n    this.setTableHeaders();\n    this.setTableData();\n    this.setBackupData(this.tableData);\n    this.initiatePagination();\n  }\n\n  public setTableHeaders(tableHeaders?: TableHeader[]) {\n    this.tableHeaders = tableHeaders ?? this.tableHeaders;\n  }\n\n  public setTableData(tableData?: any) {\n    this.tableData = tableData ?? this.tableData;\n    this.setBackupData(this.tableData);\n    this.loadPagination();\n  }\n\n  private initiatePagination() {\n    if (this.paginationEnabled) {\n      this.loadPagination();\n    }\n  }\n}\n","<div class=\"cognitable-container\">\n    <div class=\"cognitable-table-container\">\n        <table class=\"cognitable\">\n            <thead class=\"cognitable-header-row\" style=\"height: 44px\">\n                <th class=\"cognitable-header-cell-container\" *ngFor=\"let header of tableHeaders\">\n                    <cognitable-header-cell [tableInstance]=\"tableInstance\" [header]=\"header\"></cognitable-header-cell>\n                </th>\n            </thead>\n            <tbody class=\"cognitable-data-body\" [style]=\"'height: ' + (height - 44) + 'px' \">\n\n                <div class=\"cognitable-table-overlay\" *ngIf=\"loading\">\n                    <div class=\"cognitable-table-loader-overlay\">\n                        {{loadingMessage}}\n                    </div>\n                </div>\n\n                <div class=\"cognitable-table-overlay\" *ngIf=\"noData\">\n                    <div class=\"cognitable-table-loader-overlay\">\n                        {{noDataMessage}}\n                    </div>\n                </div>\n\n                <tr class=\"cognitable-data-row\" *ngFor=\"let rowData of tableData; let i = index;\">\n                    <td *ngFor=\"let header of tableHeaders; let i = index;\">\n                        <cogintable-data-cell [tableInstance]=\"tableInstance\" [header]=\"header\" [cellData]=\"rowData[header.field]\" [rowData]=\"rowData\" *ngIf=\"!header.hidden\"></cogintable-data-cell>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n\n    <ng-container *ngIf=\"paginationEnabled\">\n        <lib-cognitable-pagination [tableInstance]=\"tableInstance\"></lib-cognitable-pagination>\n    </ng-container>\n</div>\n","/*\n * Public API Surface of cognitable\n */\n\nexport * from './lib/cognitable.service';\nexport * from './lib/cognitable.component';\n\n// Commons\nexport * from './lib/commons/exportables/table-instance';\nexport * from './lib/commons/models/table-header';\nexport * from './lib/commons/models/table-styles';\nexport * from './lib/commons/table/table-base';\nexport * from './lib/commons/table/cell-renderer';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}