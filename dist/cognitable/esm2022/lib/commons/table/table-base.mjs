import { EventEmitter } from '@angular/core';
export class TableBase {
    // Init
    afterTableInit = new EventEmitter();
    // Header
    tableHeaders;
    // Data
    tableData;
    // Backup
    backupData; // For backup the table data, so that additional processes won't be affecting it
    // Pagination
    paginationEnabled = false;
    allowedPageSizes = [10, 25, 50, 100];
    pageSize = 10;
    totalPages = 0;
    currentPage = 1;
    paginationButtons = [];
    // Cell Events
    cellContentClicked = new EventEmitter();
    cellContentHover = new EventEmitter();
    cellValueChanged = new EventEmitter();
    // Table Size
    height = 400;
    // Overlays
    loading = false;
    noData = false;
    loadingMessage;
    noDataMessage;
    constructor() { }
    changeCellValue(header, rowData, value) {
        rowData[header.field] = value;
        this.cellValueChanged.emit({
            header: header,
            rowData: rowData,
            value: value
        });
    }
    setBackupData(data) {
        this.backupData = JSON.parse(JSON.stringify(data ?? []));
    }
    sort(field, order) {
        if (!order) {
            this.tableData = JSON.parse(JSON.stringify(this.backupData ?? []));
        }
        else {
            this.tableData = this.tableData.sort((a, b) => {
                if (a[field] < b[field]) {
                    return order === 'asc' ? -1 : 1;
                }
                if (a[field] > b[field]) {
                    return order === 'asc' ? 1 : -1;
                }
                return 0;
            });
        }
    }
    filter(filterValue, headers) {
        // this.backupData = (filterValue && !this.backupData?.length) ? this.setBackupData(this.tableData) : this.backupData; // Taking the backup of original data
        if (headers?.length) {
            this.filterBySpecifiedFields(headers, filterValue);
        }
        else {
            this.filterByAllFields(filterValue);
        }
    }
    filterByAllFields(filterValue) {
        const nonSearchableHeaders = this.tableHeaders?.filter(header => header?.search?.columnSearchIgnored); // Filtering the search not allowed column headers
        const nonSearchFields = nonSearchableHeaders?.map(header => header.field);
        let temporaryData = JSON.parse(JSON.stringify(this.backupData ?? []));
        temporaryData = temporaryData.filter((record) => {
            for (const recordField in (record ?? {})) {
                if (!nonSearchFields?.includes(recordField)) {
                    const value = record[recordField];
                    if (typeof value === 'string' && value?.length && value.toLowerCase().includes(filterValue.toLowerCase())) {
                        return true;
                    }
                }
            }
            return false;
        });
        this.tableData = temporaryData;
    }
    filterBySpecifiedFields(filterValue, headers) {
    }
    loadPagination() {
        if (this.paginationEnabled && this.backupData?.length) {
            this.totalPages = Math.ceil(this.pageSize && this.backupData.length ? this.backupData.length / this.pageSize : 0);
            this.changePagination(1);
        }
    }
    changePagination(page) {
        this.currentPage = page;
        this.tableData = this.getCurrentPageData();
    }
    getCurrentPageData() {
        if (this.currentPage && this.pageSize && this.backupData?.length) {
            const pageStartIndex = (this.currentPage * this.pageSize) - this.pageSize;
            return this.backupData.slice(pageStartIndex, pageStartIndex + this.pageSize);
        }
        return [];
    }
    setLoading(loading) {
        this.loading = loading;
    }
    setNoData(noData) {
        this.noData = noData;
    }
}
//# sourceMappingURL=data:application/json;base64,